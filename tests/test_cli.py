from bqat.app import run
import glob
import csv
import json
import shutil
import os


def test_face_normal_default():
    """
    GIVEN a set of mock face images
    WHEN the images processed by the default engine
    THEN check if the output files are properly generated
    """
    if os.path.exists("data/tmp/"):
        shutil.rmtree("data/tmp/")

    run(
        mode="face",
        input_folder="data/conformance/face/",
        output_folder="data/tmp/",
        limit=0,
        pattern="*",
        single=False,
        type=["wsq", "jpg", "jpeg", "png", "bmp", "jp2"],
        convert="",
        target=""
    )

    outputs = glob.glob("data/tmp/*")

    assert len(outputs) == 3

    for path in outputs:
        if path.endswith(".html"):
            with open(path) as f:
                assert f.readline().find("<!doctype html>") == 0
        if path.endswith(".csv"):
            with open(path) as f:
                assert csv.Sniffer().has_header(f.read()) == True
        if path.endswith(".json"):
            with open(path) as f:
                assert list(json.loads(f.read()).keys()) == ["metadata", "log"]

    shutil.rmtree("data/tmp/")


def test_finger_normal_default():
    """
    GIVEN a set of mock fingerprint images
    WHEN the images processed by the default engine
    THEN check if the output files are properly generated
    """
    if os.path.exists("data/tmp/"):
        shutil.rmtree("data/tmp/")

    run(
        mode="finger",
        input_folder="data/conformance/finger/",
        output_folder="data/tmp/",
        limit=10,
        pattern="*",
        single=False,
        type=["wsq", "jpg", "jpeg", "png", "bmp", "jp2"],
        convert="",
        target=""
    )

    outputs = glob.glob("data/tmp/*")

    assert len(outputs) == 3

    for path in outputs:
        if path.endswith(".html"):
            with open(path) as f:
                assert f.readline().find("<!doctype html>") == 0
        if path.endswith(".csv"):
            with open(path) as f:
                assert csv.Sniffer().has_header(f.read()) == True
        if path.endswith(".json"):
            with open(path) as f:
                assert list(json.loads(f.read()).keys()) == ["metadata", "log"]
    
    shutil.rmtree("data/tmp/")


def test_iris_normal_default():
    """
    GIVEN a set of mock iris images
    WHEN the images processed by the default engine
    THEN check if the output files are properly generated
    """
    if os.path.exists("data/tmp/"):
        shutil.rmtree("data/tmp/")

    run(
        mode="iris",
        input_folder="data/conformance/iris/",
        output_folder="data/tmp/",
        limit=0,
        pattern="*",
        single=False,
        type=["wsq", "jpg", "jpeg", "png", "bmp", "jp2"],
        convert="",
        target=""
    )

    outputs = glob.glob("data/tmp/*")

    assert len(outputs) == 3

    for path in outputs:
        if path.endswith(".html"):
            with open(path) as f:
                assert f.readline().find("<!doctype html>") == 0
        if path.endswith(".csv"):
            with open(path) as f:
                assert csv.Sniffer().has_header(f.read()) == True
        if path.endswith(".json"):
            with open(path) as f:
                assert list(json.loads(f.read()).keys()) == ["metadata", "log"]
    
    shutil.rmtree("data/tmp/")


def test_face_single():
    """
    GIVEN a set of mock face images
    WHEN the images processed by the default engine
    THEN check if the output files are properly generated by single thread processing
    """
    if os.path.exists("data/tmp/"):
        shutil.rmtree("data/tmp/")

    run(
        mode="face",
        input_folder="data/conformance/face/",
        output_folder="data/tmp/",
        limit=0,
        pattern="*",
        single=True,
        type=["wsq", "jpg", "jpeg", "png", "bmp", "jp2"],
        convert="",
        target=""
    )

    outputs = glob.glob("data/tmp/*")

    assert len(outputs) == 3

    for path in outputs:
        if path.endswith(".html"):
            with open(path) as f:
                assert f.readline().find("<!doctype html>") == 0
        if path.endswith(".csv"):
            with open(path) as f:
                assert csv.Sniffer().has_header(f.read()) == True
        if path.endswith(".json"):
            with open(path) as f:
                assert list(json.loads(f.read()).keys()) == ["metadata", "log"]

    shutil.rmtree("data/tmp/")


def test_face_limit():
    """
    GIVEN a set of mock face images
    WHEN the images processed by the default engine
    THEN check if the output files are properly generated with file number limit
    """
    if os.path.exists("data/tmp/"):
        shutil.rmtree("data/tmp/")

    run(
        mode="face",
        input_folder="data/conformance/face/",
        output_folder="data/tmp/",
        limit=2,
        pattern="*",
        single=False,
        type=["wsq", "jpg", "jpeg", "png", "bmp", "jp2"],
        convert="",
        target=""
    )

    outputs = glob.glob("data/tmp/*")

    assert len(outputs) == 3

    for path in outputs:
        if path.endswith(".html"):
            with open(path) as f:
                assert f.readline().find("<!doctype html>") == 0
        if path.endswith(".csv"):
            with open(path) as f:
                reader = [row for row in csv.DictReader(f)]
                assert len(reader) == 2
        if path.endswith(".json"):
            with open(path) as f:
                assert list(json.loads(f.read()).keys()) == ["metadata", "log"]

    shutil.rmtree("data/tmp/")
